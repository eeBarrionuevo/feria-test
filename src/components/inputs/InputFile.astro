---
interface Props {
  id: string;
  title: string;
  description?: string;
  accept?: string;
  maxSize?: number; //MB
  required?: boolean;
  helperText?: string;
  errorMessage?: string;
  className?: string;
  showIcon?: boolean;
}

const {
  id,
  title,
  description,
  accept = 'application/pdf',
  maxSize = 5,
  required = false,
  helperText = `Archivo ${accept.includes('pdf') ? '.PDF' : ''} / max. ${maxSize}mb`,
  errorMessage,
  className = '',
  showIcon = true,
} = Astro.props;

const errorId = `${id}-error`;
const fileNameId = `${id}-filename`;
---

<div class={`w-full ${className}`}>
  <label
    for={id}
    class="w-full bg-white/20 rounded-3xl border-2 border-dashed border-gray-50 
           px-4 py-4 text-center flex flex-col items-center justify-center 
           cursor-pointer transition-all duration-200
           hover:bg-white/30 hover:border-white
           focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500"
  >
    <h3 class="text-lg font-bold mb-2">{title}</h3>

    {description && (
      <p class="text-sm mb-2" set:html={description} />
    )}

    {showIcon && (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-14 h-12"
        viewBox="0 0 24 24"
        style="fill: rgb(255, 255, 255);"
      >
        <path d="M13 19v-4h3l-4-5-4 5h3v4z"></path>
        <path
          d="M7 19h2v-2H7c-1.654 0-3-1.346-3-3 0-1.404 1.199-2.756 2.673-3.015l.581-.102.192-.558C8.149 8.274 9.895 7 12 7c2.757 0 5 2.243 5 5v1h1c1.103 0 2 .897 2 2s-.897 2-2 2h-3v2h3c2.206 0 4-1.794 4-4a4.01 4.01 0 0 0-3.056-3.888C18.507 7.67 15.56 5 12 5 9.244 5 6.85 6.611 5.757 9.15 3.609 9.792 2 11.82 2 14c0 2.757 2.243 5 5 5z"
        ></path>
      </svg>
    )}

    <span class="text-sm text-white/90">{helperText}</span>

    <p id={fileNameId} class="text-xs mt-2 font-semibold text-green-300 hidden"></p>

    <input
      id={id}
      name={id}
      type="file"
      accept={accept}
      required={required}
      aria-describedby={errorId}
      data-max-size={maxSize}
      class="hidden"
    />
  </label>

  <p id={errorId} class="text-sm text-red-300 mt-2 hidden error-message">
    {errorMessage || 'Error al cargar el archivo'}
  </p>
</div>

<script>
  function initFileUpload() {
    const fileInputs = document.querySelectorAll('input[type="file"][id]');
    
    fileInputs.forEach((input) => {
      if (!(input instanceof HTMLInputElement)) return;
      
      const errorElement = document.getElementById(`${input.id}-error`);
      const fileNameElement = document.getElementById(`${input.id}-filename`);
      const maxSize = parseFloat(input.dataset.maxSize || '5');
      
      input.addEventListener('change', (e) => {
        const file = (e.target as HTMLInputElement).files?.[0];
        
        if (!file) {
          hideFileName(fileNameElement);
          hideError(errorElement, input);
          return;
        }

    
        const fileSizeMB = file.size / (1024 * 1024);
        if (fileSizeMB > maxSize) {
          showError(
            errorElement,
            input,
            `El archivo es demasiado grande. Máximo ${maxSize}MB (actual: ${fileSizeMB.toFixed(2)}MB)`
          );
          input.value = '';
          hideFileName(fileNameElement);
          return;
        }

    
        const acceptedTypes = input.accept.split(',').map(t => t.trim());
        const fileType = file.type;
        const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
        
        const isValidType = acceptedTypes.some(type => {
          if (type.startsWith('.')) {
            return fileExtension === type;
          }
          return fileType === type || fileType.startsWith(type.replace('/*', ''));
        });

        if (!isValidType) {
          showError(
            errorElement,
            input,
            `Tipo de archivo no válido. Solo se permiten: ${acceptedTypes.join(', ')}`
          );
          input.value = '';
          hideFileName(fileNameElement);
          return;
        }

 
        hideError(errorElement, input);
        showFileName(fileNameElement, file.name, fileSizeMB);
      });
    });
  }

  function showError(errorElement: HTMLElement | null, input: HTMLInputElement, message: string) {
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
      input.setAttribute('aria-invalid', 'true');
    }
  }

  function hideError(errorElement: HTMLElement | null, input: HTMLInputElement) {
    if (errorElement) {
      errorElement.classList.add('hidden');
      input.setAttribute('aria-invalid', 'false');
    }
  }

  function showFileName(fileNameElement: HTMLElement | null, fileName: string, sizeMB: number) {
    if (fileNameElement) {
      fileNameElement.textContent = `✓ ${fileName} (${sizeMB.toFixed(2)}MB)`;
      fileNameElement.classList.remove('hidden');
    }
  }

  function hideFileName(fileNameElement: HTMLElement | null) {
    if (fileNameElement) {
      fileNameElement.classList.add('hidden');
    }
  }

  document.addEventListener('DOMContentLoaded', initFileUpload);
  document.addEventListener('astro:after-swap', initFileUpload);
</script>